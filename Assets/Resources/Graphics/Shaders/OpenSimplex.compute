// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Heightmap2D
#pragma kernel CaveNoise3D

static const int xprime = 1619;
static const int yprime = 31337;
static const int zprime = 6971;
static const int wprime = 1013;

static const float F2 = 1.0 / 2.0;
static const float G2 = 1.0 / 4.0;
static const float F3 = 1.0 / 3.0;
static const float G3 = 1.0 / 6.0;
static const float G33 = ((1 / 6.0) * 3.0) - 1.0;

static const float2 _grad_2D[8] =
{
    float2(-1, -1),
    float2(1, -1),
    float2(-1, 1),
    float2(1, 1),
    float2(0, -1),
    float2(-1, 0),
    float2(0, 1),
    float2(1, 0)
};

static const float3 _grad_3D[16] =
{
    float3(1, 1, 0),
    float3(-1, 1, 0),
    float3(1, -1, 0),
    float3(-1, -1, 0),
    float3(1, 0, 1),
    float3(-1, 0, 1),
    float3(1, 0, -1),
    float3(-1, 0, -1),
    float3(0, 1, 1),
    float3(0, -1, 1),
    float3(0, 1, -1),
    float3(0, -1, -1),
    float3(1, 1, 0),
    float3(0, -1, 1),
    float3(-1, 1, 0),
    float3(0, -1, -1)
};


int fastFloor(float f)
{
    if (f >= 0)
    {
        return (int)f;
    } else {
        return (int)f - 1;
    }
}

float inverseLerp(float a, float b, float value)
{
    return clamp((value - a) / (b - a), 0.0, 1.0);
}

float gradCoord2D(int seed, float2 xy, float2 xy0)
{
    int2 xyi = (int2)xy;

    int hash = seed;
    hash ^= (xprime * xyi.x);
    hash ^= (yprime * xyi.y);

    hash = hash * hash * hash * 60493;
    hash = (hash >> 13) ^ hash;

    float2 xyg = _grad_2D[hash & 7];

    return (xy0.x * xyg.x) + (xy0.y * xyg.y);
}

float gradCoord3D(int seed, float3 xyz, float3 xyz0)
{
    int3 xyzi = (int3)xyz;

    int hash = seed;
    hash ^= (xprime * xyzi.x);
    hash ^= (yprime * xyzi.y);
    hash ^= (zprime * xyzi.z);

    hash = hash * hash * hash * 60493;
    hash = (hash >> 13) ^ hash;

    float3 xyzg = _grad_3D[hash & 15];

    return (xyz0.x * xyzg.x) + (xyz0.y * xyzg.y) + (xyz0.z * xyzg.z);
}


float simplex2D(int seed, float frequency, float2 xy)
{
    xy *= frequency;

    float t = (xy.x + xy.y) * F2;
    float2 ij = float2(fastFloor(xy.x + t), fastFloor(xy.y + t));

    t = (ij.x + ij.y) * G2;
    float2 xy0 = float2(xy.x - (ij.x - t), xy.y - (ij.y - t));
    float2 ij1;

    if (xy0.x > xy0.y)
    {
        ij1 = float2(1.0, 0.0);
    }
    else
    {
        ij1 = float2(0.0, 1.0);
    }

    float2 xy1 = (xy0 - ij1) + G2;
    float2 xy2 = (xy0 - 1.0) + F2;
    float3 n;

    t = 0.5 - pow(xy0.x, 2) - pow(xy0.y, 2);
    if (t < 0.0)
    {
        n.x = 0.0;
    }
    else
    {
        t *= t;
        n.x = pow(t, 2) * gradCoord2D(seed, ij, xy0);
    }

    t = 0.5 - pow(xy1.x, 2) - pow(xy1.y, 2);
    if (t < 0.0)
    {
        n.y = 0.0;
    }
    else
    {
        t *= t;
        n.y = pow(t, 2) * gradCoord2D(seed, ij + ij1, xy1);
    }

    t = 0.5 - pow(xy2.x, 2) - pow(xy2.y, 2);
    if (t < 0.0)
    {
        n.z = 0.0;
    }
    else
    {
        t *= t;
        n.z = pow(t, 2) * gradCoord2D(seed, ij + 1, xy2);
    }

    return 50.0 * (n.x + n.y + n.z);
}

float simplex3D(int seed, float frequency, float3 xyz)
{
    xyz *= frequency;

    float t = (xyz.x + xyz.y + xyz.z) * F3;
    float3 ijk = float3(fastFloor(xyz.x + t), fastFloor(xyz.y + t), fastFloor(xyz.z + t));

    t = (ijk.x + ijk.y + ijk.z) * G3;
    float3 xyz0 = float3(xyz.x - (ijk.x - t), xyz.y - (ijk.y - t), xyz.z - (ijk.z - t));
    float3 ijk1;
    float3 ijk2;

    if (xyz0.x >= xyz0.y)
    {
        if (xyz0.y >= xyz0.z)
        {
            ijk1 = float3(1.0, 0.0, 0.0);
            ijk2 = float3(1.0, 1.0, 0.0);
        }
        else if (xyz0.x >= xyz0.z)
        {
            ijk1 = float3(1.0, 0.0, 0.0);
            ijk2 = float3(1.0, 0.0, 1.0);
        }
        else
        {
            ijk1 = float3(0.0, 0.0, 1.0);
            ijk2 = float3(1.0, 0.0, 1.0);
        }
    }
    else
    {
        if (xyz0.y < xyz0.z)
        {
            ijk1 = float3(0.0, 0.0, 1.0);
            ijk2 = float3(0.0, 1.0, 1.0);
        }
        else if (xyz0.x < xyz0.z)
        {
            ijk1 = float3(0.0, 1.0, 0.0);
            ijk2 = float3(0.0, 1.0, 1.0);
        }
        else
        {
            ijk1 = float3(0.0, 1.0, 0.0);
            ijk2 = float3(1.0, 1.0, 0.0);
        }
    }

    float3 xyz1 = (xyz0 - ijk1) + G3;
    float3 xyz2 = (xyz0 - ijk2) + F3;
    float3 xyz3 = xyz0 + G33;
    float4 n;

    t = 0.6 - pow(xyz0.x, 2) - pow(xyz0.y, 2) - pow(xyz0.z, 2);

    if (t < 0.0)
    {
        n.x = 0.0;
    }
    else
    {
        t *= t;
        n.x = pow(t, 2) * gradCoord3D(seed, ijk, xyz0);
    }

    t = 0.6 - pow(xyz1.x, 2) - pow(xyz1.y, 2) - pow(xyz1.z, 2);
    if (t < 0.0)
    {
        n.y = 0.0;
    }
    else
    {
        t *= t;
        n.y = pow(t, 2) * gradCoord3D(seed, ijk + ijk1, xyz1);
    }

    t = 0.6 - pow(xyz2.x, 2) - pow(xyz2.y, 2) - pow(xyz2.z, 2);
    if (t < 0.0)
    {
        n.z = 0.0;
    }
    else
    {
        t *= t;
        n.z = pow(t, 2) * gradCoord3D(seed, ijk + ijk2, xyz2);
    }

    t = 0.6 - pow(xyz3.x, 2) - pow(xyz3.y, 2) - pow(xyz3.z, 2);
    if (t < 0.0)
    {
        n.w = 0.0;
    }
    else
    {
        t *= t;
        n.w = pow(t, 2) * gradCoord3D(seed, ijk + 1.0, xyz3);
    }

    return 32.0 * (n.x + n.y + n.z + n.w);
}


uniform int _HeightmapSeed;
uniform int _CaveNoiseSeedA;
uniform int _CaveNoiseSeedB;
uniform float _WorldHeight;
uniform float3 _MaximumSize;

float3 _Offset;
float _Frequency;
float _Persistence;
float _SurfaceHeight;
uint _HeightmapBufferLength;

RWStructuredBuffer<int> HeightmapResult;
RWStructuredBuffer<float> CaveNoiseResult;


uint coordFrom2DTo1D(float2 coord)
{
    return (uint)(coord.x + (coord.y * _MaximumSize.x));
}

uint coordFrom3DTo1D(float3 coord)
{
    return (uint)(coord.x + (coord.z * _MaximumSize.x) + (coord.y * (_MaximumSize.x * _MaximumSize.z)));
}

float2 coordTo2D(uint index)
{
    int y = index / _MaximumSize.x;
    int x = index % _MaximumSize.x;

    return float2(x, y);
}

float3 coordTo3D(uint index)
{
    uint y = index / (_MaximumSize.x * _MaximumSize.z);
    index -= (y * _MaximumSize.x * _MaximumSize.z);
    uint z = index / _MaximumSize.x;
    uint x = index % _MaximumSize.x;

    return float3(x, y, z);
}


float get2DHeightmap(float2 coord) {
    float noise = simplex2D(_HeightmapSeed, _Frequency, coord);
    float noiseAsWorldHeight = inverseLerp(-1.0, 1.0, noise) * _WorldHeight;
    float noisePersistedWorldHeight = noiseAsWorldHeight + ((_SurfaceHeight - (noiseAsWorldHeight * 1.25)) * _Persistence);

    return noisePersistedWorldHeight;
}

[numthreads(1024, 1, 1)]
void Heightmap2D (uint3 id : SV_DispatchThreadID)
{
    float2 coord = _Offset.xz + coordTo2D(id.x);
    float noise = get2DHeightmap(coord);

    HeightmapResult[id.x] = (int)fastFloor(noise);
}


float customSimplexNoise3DCaveNoise(float3 xyz) {
    float dampenedHeight = (xyz.y + (((_WorldHeight / 4.0) - (xyz.y * 1.25)) * _Persistence)) * 0.85;
    float heightDampener = inverseLerp(0.0, _WorldHeight, dampenedHeight);
    float noiseA = simplex3D(_CaveNoiseSeedA, 0.01, xyz) * heightDampener;
    float noiseB = simplex3D(_CaveNoiseSeedB, 0.01, xyz) * heightDampener;
    float noiseAPow2 = pow(noiseA, 2.0);
    float noiseBPow2 = pow(noiseB, 2.0);

    return (noiseAPow2 + noiseBPow2) / 2.0;
}

[numthreads(1024, 1, 1)]
void CaveNoise3D(uint3 id : SV_DispatchThreadID) {
    float3 coord = _Offset + coordTo3D(id.x);
    float noise = customSimplexNoise3DCaveNoise(coord);

    CaveNoiseResult[id.x] = noise;
}


float customSimplexNoise3DTerrain(int3 xyz)
{
    float noise = simplex3D(_HeightmapSeed, _Frequency, xyz);
    noise += 5.0 * (1.0 - inverseLerp(0.0, _WorldHeight, xyz.y));
    noise /= (xyz.y + (-1.0 * _Persistence));
    return noise;
}
